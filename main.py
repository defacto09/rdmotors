import os
import sqlite3
import logging
from oauth2client.service_account import ServiceAccountCredentials
from telegram import Update, ReplyKeyboardMarkup
from telegram.ext import Application, CommandHandler, MessageHandler, ContextTypes, filters
from datetime import datetime, timedelta
from collections import defaultdict
from dotenv import load_dotenv

load_dotenv()
logging.basicConfig(level=logging.DEBUG, format='%(asctime)s - %(levelname)s - %(message)s')
logger = logging.getLogger()

API_TOKEN = os.getenv("TELEGRAM_API_TOKEN")
MANAGER_ID = int(os.getenv("MANAGER_ID"))

MESSAGE_LIMIT = 5
TIME_LIMIT = timedelta(minutes=1)
user_message_count = defaultdict(list)

# üì¶ –Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—è SQLite
def init_db():
    conn = sqlite3.connect('client_messages.db')
    cursor = conn.cursor()
    cursor.execute('''
        CREATE TABLE IF NOT EXISTS messages (
            id INTEGER PRIMARY KEY AUTOINCREMENT,
            timestamp TEXT,
            user_id INTEGER,
            username TEXT,
            message TEXT
        )
    ''')
    conn.commit()
    conn.close()
    logger.debug("SQLite –±–∞–∑–∞ –¥–∞–Ω–∏—Ö —ñ–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–æ–≤–∞–Ω–∞.")

def init_car_status_db():
    conn = sqlite3.connect('car_status.db')
    cursor = conn.cursor()
    cursor.execute('''
        CREATE TABLE IF NOT EXISTS car_status (
            vin TEXT PRIMARY KEY,
            status TEXT,
            updated_at TEXT
        )
    ''')
    conn.commit()
    conn.close()
    logger.debug("SQLite –±–∞–∑–∞ –¥–∞–Ω–∏—Ö car —ñ–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–æ–≤–∞–Ω–æ")

# üíæ –ó–±–µ—Ä–µ–∂–µ–Ω–Ω—è –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –≤ SQLite
def save_message_to_db(user_id, username, message_text):
    try:
        conn = sqlite3.connect('client_messages.db')
        cursor = conn.cursor()
        timestamp = datetime.now().strftime('%Y-%m-%d %H:%M:%S')
        cursor.execute('''
            INSERT INTO messages (timestamp, user_id, username, message)
            VALUES (?, ?, ?, ?)
        ''', (timestamp, user_id, username, message_text))
        conn.commit()
        logger.debug(f"–ó–±–µ—Ä–µ–∂–µ–Ω–æ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –≤—ñ–¥ @{username} (ID: {user_id})")
    except Exception as e:
        logger.error(f"–ù–µ –≤–¥–∞–ª–æ—Å—è –∑–±–µ—Ä–µ–≥—Ç–∏ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –≤ –ë–î: {e}")
    finally:
        conn.close()

# üîí –ê–Ω—Ç–∏—Å–ø–∞–º
def is_spam(user_id):
    now = datetime.now()
    user_message_count[user_id] = [t for t in user_message_count[user_id] if now - t < TIME_LIMIT]
    if len(user_message_count[user_id]) >= MESSAGE_LIMIT:
        return True
    user_message_count[user_id].append(now)
    return False

async def update_vin_status(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if update.effective_user.id != MANAGER_ID:
        await update.message.reply_text("‚ùå –£ –≤–∞—Å –Ω–µ–º–∞—î –¥–æ—Å—Ç—É–ø—É.")
        return
    if len(context.args) < 2:
        await update.message.reply_text("‚ö†Ô∏è –§–æ—Ä–º–∞—Ç: /vinstatus <VIN> <—Å—Ç–∞—Ç—É—Å>")
        return

    vin = context.args[0].upper()
    status = " ".join(context.args[1:])
    now = datetime.now().strftime('%Y-%m-%d %H:%M:%S')

    try:
        conn = sqlite3.connect('car_status.db')
        cursor = conn.cursor()
        cursor.execute('''
            INSERT INTO car_status (vin, status, updated_at)
            VALUES (?, ?, ?)
            ON CONFLICT(vin) DO UPDATE SET status = excluded.status, updated_at = excluded.updated_at
        ''', (vin, status, now))
        conn.commit()
        conn.close()
        await update.message.reply_text(f"‚úÖ –°—Ç–∞—Ç—É—Å –¥–ª—è VIN {vin} –æ–Ω–æ–≤–ª–µ–Ω–æ:\nüìç {status}")
    except Exception as e:
        logger.error(f"–ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –æ–Ω–æ–≤–ª–µ–Ω–Ω—ñ car_status: {e}")
        await update.message.reply_text("‚ö†Ô∏è –ù–µ –≤–¥–∞–ª–æ—Å—è –æ–Ω–æ–≤–∏—Ç–∏ —Å—Ç–∞—Ç—É—Å.")

def get_car_status_by_vin(vin):
    try:
        conn = sqlite3.connect('car_status.db')
        cursor = conn.cursor()
        cursor.execute("SELECT status, updated_at FROM car_status WHERE vin = ?", (vin,))
        result = cursor.fetchone()
        conn.close()
        if result:
            logger.debug(f"–ó–Ω–∞–π–¥–µ–Ω–∏–π —Å—Ç–∞—Ç—É—Å –¥–ª—è VIN {vin}: {result}")
        else:
            logger.debug(f"–ù–µ –∑–Ω–∞–π–¥–µ–Ω–æ —Å—Ç–∞—Ç—É—Å—É –¥–ª—è VIN {vin}")
        return result
    except Exception as e:
        logger.error(f"–ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –ø–æ—à—É–∫—É VIN —É car_status.db: {e}")
        return None


# üì© –û–±—Ä–æ–±–∫–∞ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω—å
async def handle_user_message(update: Update, context: ContextTypes.DEFAULT_TYPE):
    text = update.message.text
    user = update.message.from_user
    user_id = user.id
    username = user.username or "(–±–µ–∑ username)"

    if is_spam(user_id):
        await update.message.reply_text("‚ùó –í–∏ –ø–µ—Ä–µ–≤–∏—â–∏–ª–∏ –ª—ñ–º—ñ—Ç –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω—å. –°–ø—Ä–æ–±—É–π—Ç–µ –ø—ñ–∑–Ω—ñ—à–µ.")
        return

    elif len(text) == 17 and text.isalnum():
        result = get_car_status_by_vin(text.upper())
        if result:
            status, updated = result
            await update.message.reply_text(
                f"üîé –°—Ç–∞—Ç—É—Å –∞–≤—Ç–æ: \n(VIN: {text.upper()}):\nüìç {status}\nüïí –û–Ω–æ–≤–ª–µ–Ω–æ: {updated}")
        else:
            await update.message.reply_text(
                "‚ö†Ô∏è –ê–≤—Ç–æ –∑ —Ç–∞–∫–∏–º VIN-–∫–æ–¥–æ–º –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ –≤ –±–∞–∑—ñ. –ó–∞—á–µ–∫–∞–π—Ç–µ –æ–Ω–æ–≤–ª–µ–Ω–Ω—è –º–µ–Ω–µ–¥–∂–µ—Ä–æ–º.")

    keyboard_texts = [
        "üì• –•–æ—á—É –∞–≤—Ç–æ –∑—ñ –°–®–ê", "‚ùìFAQ", "üìû –ö–æ–Ω—Ç–∞–∫—Ç",
        "üìã –í –Ω–∞—è–≤–Ω–æ—Å—Ç—ñ", "üöó –î–µ –∞–≤—Ç–æ?"
    ]

    if user_id != MANAGER_ID:
        save_message_to_db(user_id, username, text)

        msg = f"‚úâÔ∏è –ü–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –≤—ñ–¥ @{username} (ID: {user_id}):\n{text}"
        try:
            await context.bot.send_message(chat_id=MANAGER_ID, text=msg)
        except Exception as e:
            logger.error(f"–ù–µ –≤–¥–∞–ª–æ—Å—è –ø–µ—Ä–µ—Å–ª–∞—Ç–∏ –º–µ–Ω–µ–¥–∂–µ—Ä—É: {e}")

        lowered = text.lower()

        if text in keyboard_texts:
            if "–¥–µ –∞–≤—Ç–æ" in lowered:
                await update.message.reply_text("üöó –©–æ–± –¥—ñ–∑–Ω–∞—Ç–∏—Å—å —Å—Ç–∞—Ç—É—Å –¥–æ—Å—Ç–∞–≤–∫–∏, –Ω–∞–¥–∞–π—Ç–µ VIN-–∫–æ–¥ –∞–±–æ –Ω–æ–º–µ—Ä –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è.")
            elif "—Ö–æ—á—É –∞–≤—Ç–æ –∑—ñ —Å—à–∞" in lowered:
                await update.message.reply_text(
                    "üëã –©–æ–± —Ä–æ–∑–ø–æ—á–∞—Ç–∏ –ø—Ä–æ—Ü–µ—Å –¥–æ—Å—Ç–∞–≤–∫–∏ –∞–≤—Ç–æ, –∑–∞–ø–æ–≤–Ω—ñ—Ç—å —Ñ–æ—Ä–º—É: https://forms.gle/BXkuZr9C5qEJHijd7\n\n"
                    "‚ùóÔ∏è–û–±–æ–≤'—è–∑–∫–æ–≤–æ –æ–∑–Ω–∞–π–æ–º—Ç–µ—Å—å –∑ –Ω–∞—à–∏–º –¥–æ–≥–æ–≤–æ—Ä–æ–º –ø–µ—Ä–µ–¥ –∑–∞–ø–æ–≤–Ω–µ–Ω–Ω—è–º! /agreement"
                )
            elif "–∫–æ–Ω—Ç–∞–∫—Ç" in lowered or "—Ç–µ–ª–µ—Ñ–æ–Ω" in lowered:
                await update.message.reply_text("üìû –ù–∞—à –º–µ–Ω–µ–¥–∂–µ—Ä –∑–≤'—è–∂–µ—Ç—å—Å—è –∑ –≤–∞–º–∏. –¢–µ–ª–µ—Ñ–æ–Ω: +380673951195")
            elif "–≤ –Ω–∞—è–≤–Ω–æ—Å—Ç—ñ" in lowered or "—è–∫—ñ –∞–≤—Ç–æ" in lowered:
                cars = [
                    {"photo": "available_cars/bmwx5.jpg", "caption": "BMW X5 2013, $17,200"},
                    {"photo": "available_cars/audia4.jpg", "caption": "Audi A4 2017, $24,500"},
                    {"photo": "available_cars/tiguan.jpg", "caption": "Volkswagen Tiguan 2018, $22,700"}
                ]
                for car in cars:
                    try:
                        with open(car["photo"], "rb") as photo_file:
                            await update.message.reply_photo(photo=photo_file, caption=car["caption"])
                    except Exception as e:
                        logger.error(f"–ù–µ –≤–¥–∞–ª–æ—Å—è –Ω–∞–¥—ñ—Å–ª–∞—Ç–∏ —Ñ–æ—Ç–æ {car['photo']}: {e}")
            elif "faq" in lowered or "–ø–∏—Ç–∞–Ω–Ω—è" in lowered:
                        link = "https://docs.google.com/document/d/1VSmsVevCBc0BCSVnsJgdkwlZRWDY_hhjIbcnzPpsOVg/edit?usp=sharing"
                        await update.message.reply_text(
                            f"üöô –ù–∞—Ç–∏—Å–Ω—É–≤—à–∏ *'üì• –•–æ—á—É –∞–≤—Ç–æ –∑—ñ –°–®–ê'* –≤–∏ –∑–º–æ–∂–µ—Ç–µ —Ä–æ–∑–ø–æ—á–∞—Ç–∏ –ø—Ä–æ—Ü–µ—Å –ø–æ–∫—É–ø–∫–∏ –∞–≤—Ç–æ.\n\n"
                            f"‚ùì –©–æ–± –¥—ñ–∑–Ω–∞—Ç–∏—Å—å —Å—Ç–∞—Ç—É—Å –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è, –Ω–∞—Ç–∏—Å–Ω—ñ—Ç—å *'üöó –î–µ –∞–≤—Ç–æ?'*.\n\n"
                            f"üíµ –í—Å—ñ —Ü—ñ–Ω–∏ –∑–∞–ª–µ–∂–∞—Ç—å –≤—ñ–¥ –±–∞–≥–∞—Ç—å–æ—Ö —Ñ–∞–∫—Ç–æ—Ä—ñ–≤, —â–æ–± –±—ñ–ª—å—à–µ –¥—ñ–∑–Ω–∞—Ç–∏—Å—å –ø—Ä–æ —Ü–µ, –ø–µ—Ä–µ–≥–ª—è–Ω—å—Ç–µ –Ω–∞—à [–¥–æ–≥–æ–≤—ñ—Ä]({link}).\n\n"
                            f"‚òéÔ∏è –Ø–∫—â–æ –≤–∏ —Ö–æ—á–µ—Ç–µ —Ç–µ—Ä–º—ñ–Ω–æ–≤—É –≤—ñ–¥–ø–æ–≤—ñ–¥—å –ø–æ –≤–∞—à–æ–º—É –∑–∞–ø–∏—Ç—ñ, —Ç–æ –º–æ–∂–µ—Ç–µ –∑–≤–µ—Ä–Ω—É—Ç–∏—Å—å –∑–∞ –∫–æ–Ω—Ç–∞–∫—Ç–æ–º —É *üìû –ö–æ–Ω—Ç–∞–∫—Ç*\n\n"
                            f"üöò –ë–∞–∂–∞—î—Ç–µ –¥—ñ–∑–Ω–∞—Ç–∏—Å—å –ø—Ä–æ –Ω–∞—è–≤–Ω—ñ –∞–≤—Ç–æ RDMOTORS —É –ø—Ä–æ–¥–∞–∂—ñ? –ó–Ω–∞–π–¥–µ—Ç–µ –≤—ñ–¥–ø–æ–≤—ñ–¥—å —É *'üìã –í –Ω–∞—è–≤–Ω–æ—Å—Ç—ñ'*\n\n"
                            f"_–ó–∞ —ñ–Ω–∞–∫—à–∏–º–∏ –ø–∏—Ç–∞–Ω–Ω—è–º–∏ –ø–∏—à—ñ—Ç—å –≤ —á–∞—Ç, –º–µ–Ω–µ–¥–∂–µ—Ä –∑–≤'—è–∂–µ—Ç—å—Å—è –∑ –≤–∞–º–∏_",
                            parse_mode="Markdown",
                            disable_web_page_preview = True
                        )
        else:
            await update.message.reply_text("‚úÖ –í–∞—à–µ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –Ω–∞–¥—ñ—Å–ª–∞–Ω–æ –º–µ–Ω–µ–¥–∂–µ—Ä—É.")
    else:
        pass  # –º–µ–Ω–µ–¥–∂–µ—Ä –Ω—ñ—á–æ–≥–æ –Ω–µ —Ä–æ–±–∏—Ç—å —Ç—É—Ç

# üìÑ –í—ñ–¥–ø—Ä–∞–≤–∫–∞ –¥–æ–≥–æ–≤–æ—Ä—É
async def agreement(update: Update, context: ContextTypes.DEFAULT_TYPE):
    link = "https://docs.google.com/document/d/1VSmsVevCBc0BCSVnsJgdkwlZRWDY_hhjIbcnzPpsOVg/edit?usp=sharing/view"
    await update.message.reply_text(
        f"üìÑ –û—Å—å –Ω–∞—à –¥–æ–≥–æ–≤—ñ—Ä:\n\n[–ü–æ—Å–∏–ª–∞–Ω–Ω—è]({link})",
        parse_mode="Markdown",
        disable_web_page_preview=True
    )

# üßæ –ü–æ–∫–∞–∑ –æ—Å—Ç–∞–Ω–Ω—ñ—Ö –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω—å
async def show_messages(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if update.effective_user.id != MANAGER_ID:
        await update.message.reply_text("‚ùå –£ –≤–∞—Å –Ω–µ–º–∞—î –¥–æ—Å—Ç—É–ø—É.")
        return

    try:
        conn = sqlite3.connect('client_messages.db')
        cursor = conn.cursor()
        cursor.execute('''
            SELECT timestamp, user_id, username, message
            FROM messages
            ORDER BY id DESC
            LIMIT 10
        ''')
        rows = cursor.fetchall()
        conn.close()

        if not rows:
            await update.message.reply_text("‚ö†Ô∏è –ü–æ–≤—ñ–¥–æ–º–ª–µ–Ω—å —â–µ –Ω–µ–º–∞—î.")
            return

        text = "üóÇ –û—Å—Ç–∞–Ω–Ω—ñ 10 –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω—å:\n\n"
        for row in rows:
            ts, uid, uname, msg = row
            text += f"üïí {ts}\nüë§ @{uname} (ID: {uid})\nüí¨ {msg}\n\n"

        await update.message.reply_text(text[:4096])
    except Exception as e:
        logger.error(f"–ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ —á–∏—Ç–∞–Ω–Ω—ñ –∑ –ë–î: {e}")
        await update.message.reply_text("‚ö†Ô∏è –ù–µ –≤–¥–∞–ª–æ—Å—è –æ—Ç—Ä–∏–º–∞—Ç–∏ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –∑ –±–∞–∑–∏.")

# üîÅ –í—ñ–¥–ø–æ–≤—ñ–¥—å –º–µ–Ω–µ–¥–∂–µ—Ä–∞ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—É
async def reply_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if update.effective_user.id != MANAGER_ID:
        await update.message.reply_text("‚ùå –£ –≤–∞—Å –Ω–µ–º–∞—î –¥–æ—Å—Ç—É–ø—É.")
        return
    if len(context.args) < 2:
        await update.message.reply_text("‚ö†Ô∏è –§–æ—Ä–º–∞—Ç: /reply <user_id> <—Ç–µ–∫—Å—Ç>")
        return

    user_id = context.args[0]
    reply_text = " ".join(context.args[1:])
    try:
        await context.bot.send_message(chat_id=int(user_id), text=f"üì© –í—ñ–¥–ø–æ–≤—ñ–¥—å –≤—ñ–¥ –º–µ–Ω–µ–¥–∂–µ—Ä–∞:\n{reply_text}")
        await update.message.reply_text("‚úÖ –ü–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –Ω–∞–¥—ñ—Å–ª–∞–Ω–æ.")
    except Exception as e:
        logger.error(e)
        await update.message.reply_text(f"‚ö†Ô∏è –ù–µ –≤–¥–∞–ª–æ—Å—è –Ω–∞–¥—ñ—Å–ª–∞—Ç–∏ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è: {e}")

# üîò –ö–Ω–æ–ø–∫–∏
def get_main_keyboard():
    return ReplyKeyboardMarkup([
        ["üì• –•–æ—á—É –∞–≤—Ç–æ –∑—ñ –°–®–ê", "‚ùìFAQ"],
        ["üöó –î–µ –∞–≤—Ç–æ?", "üìû –ö–æ–Ω—Ç–∞–∫—Ç"],
        ["üìã –í –Ω–∞—è–≤–Ω–æ—Å—Ç—ñ"]
    ], resize_keyboard=True)

# ‚ñ∂Ô∏è –ö–æ–º–∞–Ω–¥–∞ —Å—Ç–∞—Ä—Ç—É
async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text(
        "–ü—Ä–∏–≤—ñ—Ç! –í–∞—Å –≤—ñ—Ç–∞—î –ø—ñ–¥—Ç—Ä–∏–º–∫–∞ RDMOTORS. –û–±–µ—Ä—ñ—Ç—å –¥—ñ—é –∞–±–æ –Ω–∞–ø–∏—à—ñ—Ç—å –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è.",
        reply_markup=get_main_keyboard()
    )

# üöÄ –ó–∞–ø—É—Å–∫
def main():
    init_db()  # –Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑—É—î–º–æ –±–∞–∑—É
    init_car_status_db() # –Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑—É—î–º–æ –±–∞–∑—É –¥–∞–Ω–∏—Ö —Å—Ç–∞—Ç—É—Å—É –∞–≤—Ç–æ
    app = Application.builder().token(API_TOKEN).build()
    app.add_handler(CommandHandler("start", start))
    app.add_handler(CommandHandler("agreement", agreement))
    app.add_handler(CommandHandler("reply", reply_command))
    app.add_handler(CommandHandler("messages", show_messages))
    app.add_handler(CommandHandler("vinstatus", update_vin_status))
    app.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, handle_user_message))

    logger.info("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω–æ.")
    app.run_polling()

if __name__ == "__main__":
    main()
