import os
import sqlite3
import logging
from oauth2client.service_account import ServiceAccountCredentials
from telegram import Update, ReplyKeyboardMarkup
from telegram.ext import Application, CommandHandler, MessageHandler, ContextTypes, filters
from datetime import datetime, timedelta
from collections import defaultdict
from dotenv import load_dotenv

load_dotenv()
logging.basicConfig(level=logging.DEBUG, format='%(asctime)s - %(levelname)s - %(message)s')
logger = logging.getLogger()

API_TOKEN = os.getenv("TELEGRAM_API_TOKEN")
MANAGER_ID = 1376857543

MESSAGE_LIMIT = 5
TIME_LIMIT = timedelta(minutes=1)
user_message_count = defaultdict(list)

# Google Sheets –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü—ñ—è (–ø–æ–∫–∏ —â–æ –Ω–µ –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î—Ç—å—Å—è, –∞–ª–µ –∑–∞–ª–∏—à–µ–Ω–æ)
scope = [
    "https://spreadsheets.google.com/feeds",
    "https://www.googleapis.com/auth/spreadsheets",
    "https://www.googleapis.com/auth/drive"
]
creds = ServiceAccountCredentials.from_json_keyfile_name(
    os.getenv("GOOGLE_CREDS_PATH"), scope)

# üì¶ –Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—è SQLite
def init_db():
    conn = sqlite3.connect('client_messages.db')
    cursor = conn.cursor()
    cursor.execute('''
        CREATE TABLE IF NOT EXISTS messages (
            id INTEGER PRIMARY KEY AUTOINCREMENT,
            timestamp TEXT,
            user_id INTEGER,
            username TEXT,
            message TEXT
        )
    ''')
    conn.commit()
    conn.close()
    logger.debug("SQLite –±–∞–∑–∞ –¥–∞–Ω–∏—Ö —ñ–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–æ–≤–∞–Ω–∞.")

# üíæ –ó–±–µ—Ä–µ–∂–µ–Ω–Ω—è –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –≤ SQLite
def save_message_to_db(user_id, username, message_text):
    try:
        conn = sqlite3.connect('client_messages.db')
        cursor = conn.cursor()
        timestamp = datetime.now().strftime('%Y-%m-%d %H:%M:%S')
        cursor.execute('''
            INSERT INTO messages (timestamp, user_id, username, message)
            VALUES (?, ?, ?, ?)
        ''', (timestamp, user_id, username, message_text))
        conn.commit()
        logger.debug(f"–ó–±–µ—Ä–µ–∂–µ–Ω–æ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –≤—ñ–¥ @{username} (ID: {user_id})")
    except Exception as e:
        logger.error(f"–ù–µ –≤–¥–∞–ª–æ—Å—è –∑–±–µ—Ä–µ–≥—Ç–∏ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –≤ –ë–î: {e}")
    finally:
        conn.close()

# üîí –ê–Ω—Ç–∏—Å–ø–∞–º
def is_spam(user_id):
    now = datetime.now()
    user_message_count[user_id] = [t for t in user_message_count[user_id] if now - t < TIME_LIMIT]
    if len(user_message_count[user_id]) >= MESSAGE_LIMIT:
        return True
    user_message_count[user_id].append(now)
    return False

# üì© –û–±—Ä–æ–±–∫–∞ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω—å
async def handle_user_message(update: Update, context: ContextTypes.DEFAULT_TYPE):
    text = update.message.text
    user = update.message.from_user
    user_id = user.id
    username = user.username or "(–±–µ–∑ username)"

    if is_spam(user_id):
        await update.message.reply_text("‚ùó –í–∏ –ø–µ—Ä–µ–≤–∏—â–∏–ª–∏ –ª—ñ–º—ñ—Ç –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω—å. –°–ø—Ä–æ–±—É–π—Ç–µ –ø—ñ–∑–Ω—ñ—à–µ.")
        return

    keyboard_texts = [
        "üì• –•–æ—á—É –∞–≤—Ç–æ –∑—ñ –°–®–ê", "‚ùìFAQ", "üìû –ö–æ–Ω—Ç–∞–∫—Ç",
        "üìã –í –Ω–∞—è–≤–Ω–æ—Å—Ç—ñ", "üöó –î–µ –∞–≤—Ç–æ?"
    ]

    if user_id != MANAGER_ID:
        save_message_to_db(user_id, username, text)

        msg = f"‚úâÔ∏è –ü–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –≤—ñ–¥ @{username} (ID: {user_id}):\n{text}"
        try:
            await context.bot.send_message(chat_id=MANAGER_ID, text=msg)
        except Exception as e:
            logger.error(f"–ù–µ –≤–¥–∞–ª–æ—Å—è –ø–µ—Ä–µ—Å–ª–∞—Ç–∏ –º–µ–Ω–µ–¥–∂–µ—Ä—É: {e}")

        lowered = text.lower()

        if text in keyboard_texts:
            if "–¥–µ –∞–≤—Ç–æ" in lowered:
                await update.message.reply_text("üöó –©–æ–± –¥—ñ–∑–Ω–∞—Ç–∏—Å—å —Å—Ç–∞—Ç—É—Å –¥–æ—Å—Ç–∞–≤–∫–∏, –Ω–∞–¥–∞–π—Ç–µ VIN-–∫–æ–¥ –∞–±–æ –Ω–æ–º–µ—Ä –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è.")
            elif "—Ö–æ—á—É –∞–≤—Ç–æ –∑—ñ —Å—à–∞" in lowered:
                await update.message.reply_text(
                    "üëã –©–æ–± —Ä–æ–∑–ø–æ—á–∞—Ç–∏ –ø—Ä–æ—Ü–µ—Å –¥–æ—Å—Ç–∞–≤–∫–∏ –∞–≤—Ç–æ, –∑–∞–ø–æ–≤–Ω—ñ—Ç—å —Ñ–æ—Ä–º—É: https://forms.gle/BXkuZr9C5qEJHijd7\n\n"
                    "‚ùóÔ∏è–û–±–æ–≤'—è–∑–∫–æ–≤–æ –æ–∑–Ω–∞–π–æ–º—Ç–µ—Å—å –∑ –Ω–∞—à–∏–º –¥–æ–≥–æ–≤–æ—Ä–æ–º –ø–µ—Ä–µ–¥ –∑–∞–ø–æ–≤–Ω–µ–Ω–Ω—è–º! /agreement"
                )
            elif "–∫–æ–Ω—Ç–∞–∫—Ç" in lowered or "—Ç–µ–ª–µ—Ñ–æ–Ω" in lowered:
                await update.message.reply_text("üìû –ù–∞—à –º–µ–Ω–µ–¥–∂–µ—Ä –∑–≤'—è–∂–µ—Ç—å—Å—è –∑ –≤–∞–º–∏. –¢–µ–ª–µ—Ñ–æ–Ω: +380673951195")
            elif "–≤ –Ω–∞—è–≤–Ω–æ—Å—Ç—ñ" in lowered or "—è–∫—ñ –∞–≤—Ç–æ" in lowered:
                await update.message.reply_text("üìã –ù–∞—Ä–∞–∑—ñ —Ü—è —Ñ—É–Ω–∫—Ü—ñ—è –≤ —Ä–æ–∑—Ä–æ–±—Ü—ñ. –î–∞–Ω—ñ —Å–∫–æ—Ä–æ –∑'—è–≤–ª—è—Ç—å—Å—è.")
        elif "faq" in lowered or "–ø–∏—Ç–∞–Ω–Ω—è" in lowered:
            await update.message.reply_text("‚ùì –©–æ–± –¥—ñ–∑–Ω–∞—Ç–∏—Å—å —Å—Ç–∞—Ç—É—Å –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è, –Ω–∞—Ç–∏—Å–Ω—ñ—Ç—å 'üöó –î–µ –∞–≤—Ç–æ?'")
        else:
            await update.message.reply_text("‚úÖ –í–∞—à–µ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –Ω–∞–¥—ñ—Å–ª–∞–Ω–æ –º–µ–Ω–µ–¥–∂–µ—Ä—É.")
    else:
        pass  # –º–µ–Ω–µ–¥–∂–µ—Ä –Ω—ñ—á–æ–≥–æ –Ω–µ —Ä–æ–±–∏—Ç—å —Ç—É—Ç

# üìÑ –í—ñ–¥–ø—Ä–∞–≤–∫–∞ –¥–æ–≥–æ–≤–æ—Ä—É
async def agreement(update: Update, context: ContextTypes.DEFAULT_TYPE):
    link = "https://docs.google.com/document/d/1VSmsVevCBc0BCSVnsJgdkwlZRWDY_hhjIbcnzPpsOVg/edit?usp=sharing/view"
    await update.message.reply_text(
        f"üìÑ –û—Å—å –Ω–∞—à –¥–æ–≥–æ–≤—ñ—Ä:\n\n[–ü–æ—Å–∏–ª–∞–Ω–Ω—è]({link})",
        parse_mode="Markdown"
    )

# üßæ –ü–æ–∫–∞–∑ –æ—Å—Ç–∞–Ω–Ω—ñ—Ö –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω—å
async def show_messages(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if update.effective_user.id != MANAGER_ID:
        await update.message.reply_text("‚ùå –£ –≤–∞—Å –Ω–µ–º–∞—î –¥–æ—Å—Ç—É–ø—É.")
        return

    try:
        conn = sqlite3.connect('client_messages.db')
        cursor = conn.cursor()
        cursor.execute('''
            SELECT timestamp, user_id, username, message
            FROM messages
            ORDER BY id DESC
            LIMIT 10
        ''')
        rows = cursor.fetchall()
        conn.close()

        if not rows:
            await update.message.reply_text("‚ö†Ô∏è –ü–æ–≤—ñ–¥–æ–º–ª–µ–Ω—å —â–µ –Ω–µ–º–∞—î.")
            return

        text = "üóÇ –û—Å—Ç–∞–Ω–Ω—ñ 10 –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω—å:\n\n"
        for row in rows:
            ts, uid, uname, msg = row
            text += f"üïí {ts}\nüë§ @{uname} (ID: {uid})\nüí¨ {msg}\n\n"

        await update.message.reply_text(text[:4096])
    except Exception as e:
        logger.error(f"–ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ —á–∏—Ç–∞–Ω–Ω—ñ –∑ –ë–î: {e}")
        await update.message.reply_text("‚ö†Ô∏è –ù–µ –≤–¥–∞–ª–æ—Å—è –æ—Ç—Ä–∏–º–∞—Ç–∏ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –∑ –±–∞–∑–∏.")

# üîÅ –í—ñ–¥–ø–æ–≤—ñ–¥—å –º–µ–Ω–µ–¥–∂–µ—Ä–∞ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—É
async def reply_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if update.effective_user.id != MANAGER_ID:
        await update.message.reply_text("‚ùå –£ –≤–∞—Å –Ω–µ–º–∞—î –¥–æ—Å—Ç—É–ø—É.")
        return
    if len(context.args) < 2:
        await update.message.reply_text("‚ö†Ô∏è –§–æ—Ä–º–∞—Ç: /reply <user_id> <—Ç–µ–∫—Å—Ç>")
        return

    user_id = context.args[0]
    reply_text = " ".join(context.args[1:])
    try:
        await context.bot.send_message(chat_id=int(user_id), text=f"üì© –í—ñ–¥–ø–æ–≤—ñ–¥—å –≤—ñ–¥ –º–µ–Ω–µ–¥–∂–µ—Ä–∞:\n{reply_text}")
        await update.message.reply_text("‚úÖ –ü–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –Ω–∞–¥—ñ—Å–ª–∞–Ω–æ.")
    except Exception as e:
        logger.error(e)
        await update.message.reply_text(f"‚ö†Ô∏è –ù–µ –≤–¥–∞–ª–æ—Å—è –Ω–∞–¥—ñ—Å–ª–∞—Ç–∏ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è: {e}")

# üîò –ö–Ω–æ–ø–∫–∏
def get_main_keyboard():
    return ReplyKeyboardMarkup([
        ["üì• –•–æ—á—É –∞–≤—Ç–æ –∑—ñ –°–®–ê", "‚ùìFAQ"],
        ["üöó –î–µ –∞–≤—Ç–æ?", "üìû –ö–æ–Ω—Ç–∞–∫—Ç"],
        ["üìã –í –Ω–∞—è–≤–Ω–æ—Å—Ç—ñ"]
    ], resize_keyboard=True)

# ‚ñ∂Ô∏è –ö–æ–º–∞–Ω–¥–∞ —Å—Ç–∞—Ä—Ç—É
async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text(
        "–ü—Ä–∏–≤—ñ—Ç! –í–∞—Å –≤—ñ—Ç–∞—î –ø—ñ–¥—Ç—Ä–∏–º–∫–∞ RDMOTORS. –û–±–µ—Ä—ñ—Ç—å –¥—ñ—é –∞–±–æ –Ω–∞–ø–∏—à—ñ—Ç—å –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è.",
        reply_markup=get_main_keyboard()
    )

# üöÄ –ó–∞–ø—É—Å–∫
def main():
    init_db()  # –Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑—É—î–º–æ –±–∞–∑—É
    app = Application.builder().token(API_TOKEN).build()

    app.add_handler(CommandHandler("start", start))
    app.add_handler(CommandHandler("agreement", agreement))
    app.add_handler(CommandHandler("reply", reply_command))
    app.add_handler(CommandHandler("messages", show_messages))
    app.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, handle_user_message))

    logger.info("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω–æ.")
    app.run_polling()

if __name__ == "__main__":
    main()
